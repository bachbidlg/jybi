<?php

namespace milkyway\team\models\table;

use cheatsheet\Time;
use milkyway\team\models\query\TeamQuery;
use modava\auth\models\User;
use Yii;
use yii\db\ActiveRecord;

class TeamTable extends \yii\db\ActiveRecord
{
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISHED = 1;
    public $pathImage;
    public $urlImage;

    public function init()
    {
        $this->pathImage = Yii::getAlias('@frontend/web/uploads/team');
        $this->urlImage = Yii::getAlias('@frontendUrl/uploads/team');
        parent::init(); // TODO: Change the autogenerated stub
    }

    public static function tableName()
    {
        return 'team';
    }

    public static function find()
    {
        return new TeamQuery(get_called_class());
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserCreated()
    {
        return $this->hasOne(User::class, ['id' => 'created_by']);
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserUpdated()
    {
        return $this->hasOne(User::class, ['id' => 'updated_by']);
    }

    public function getTeamCategoryHasOne()
    {
        return $this->hasOne(TeamCategoryTable::class, ['id' => 'category']);
    }

    public function getImage()
    {
        if (!is_dir($this->pathImage . '/' . $this->image) && file_exists($this->pathImage . '/' . $this->image)) {
            return Yii::$app->assetManager->publish($this->pathImage . '/' . $this->image)[1];
        }
        $noImage = Yii::getAlias('@frontend/web/default/no-image-770x450.png');
        if (file_exists($noImage)) {
            return Yii::$app->assetManager->publish($noImage)[1];
        }
        return null;
    }
}
