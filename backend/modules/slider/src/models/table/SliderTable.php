<?php

namespace milkyway\slider\models\table;

use backend\modules\user\models\User;
use milkyway\slider\models\query\SliderQuery;
use Yii;

class SliderTable extends \yii\db\ActiveRecord
{
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISHED = 1;
    const TYPE_SLIDER = 0;
    const TYPE_PARTNER = 1;
    const TYPE = [
        self::TYPE_SLIDER => 'Slider',
        self::TYPE_PARTNER => 'Partner',
    ];

    public $pathImage;
    public $urlImage;

    public function init()
    {
        $this->pathImage = Yii::getAlias('@frontend/web/uploads/sliders');
        $this->urlImage = Yii::getAlias('@frontendUrl/uploads/sliders');
        parent::init(); // TODO: Change the autogenerated stub
    }

    public static function tableName()
    {
        return 'slider';
    }

    public static function find()
    {
        return new SliderQuery(get_called_class());
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-slider-get-all',
            'redis-slider-get-by-type-' . $this->type,
            'redis-slider-get-by-id-' . $this->id
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-slider-get-all',
            'redis-slider-get-by-type-' . $this->type,
            'redis-slider-get-by-id-' . $this->id
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserCreated()
    {
        return $this->hasOne(User::class, ['id' => 'created_by']);
    }

    /**
     * @return mixed
     *
     * @throws \yii\base\InvalidConfigException
     */
    public function getImage()
    {
        if (file_exists($this->pathImage . '/' . $this->image)) {
            return Yii::$app->assetManager->publish($this->pathImage . '/' . $this->image)[1];
        }
        return null;
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserUpdated()
    {
        return $this->hasOne(User::class, ['id' => 'updated_by']);
    }

    public static function getById($id)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-slider-get-by-id-' . $id;
        $data = $cache->get($key);
        if ($data == false) {
            $query = self::find()->where([self::tableName() . '.id' => $id])->sort();
            $data = $query->one();
            $cache->set($key, $data);
        }
        return $data;
    }

    public static function getByType($type = null, $published = false, $data_cache = YII2_CACHE)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-slider-get-by-type-' . $type;
        $data = $cache->get($key);
        if ($data == false || $data_cache == false) {
            $query = self::find()->where([self::tableName() . '.type' => $type])->sort();
            if ($published === true) $query->published();
            $data = $query->all();
            $cache->set($key, $data);
        }
        return $data;
    }

    public static function getAll()
    {
        $cache = Yii::$app->cache;
        $key = 'redis-slider-get-all';
        $data = $cache->get($key);
        if ($data == false) {
            $query = self::find()->sort();
            $data = $query->all();
            $cache->set($key, $data);
        }
        return $data;
    }
}
