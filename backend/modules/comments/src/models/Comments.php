<?php

namespace milkyway\comments\models;

use backend\models\CommentsMetadata;
use common\helpers\MyHelper;
use common\models\User;
use milkyway\comments\CommentsModule;
use milkyway\comments\models\metadata_interface\MetadataInterface;
use milkyway\comments\models\table\CommentsTable;
use yii\base\Exception;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\BlameableBehavior;
use yii\db\ActiveRecord;
use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "comments".
 *
 * @property int $id
 * @property string $comment
 * @property string $comment_table
 * @property int $comment_id
 * @property int $status 0: Disabled, 1: Published
 * @property int $created_at
 * @property int $created_by
 * @property int $updated_at
 * @property int $updated_by
 * @property array $metadata Other info, ex: name, phone, address,...
 *
 * @property User $createdBy
 * @property User $updatedBy
 */
class Comments extends CommentsTable
{
    const SCENARIO_COMMENT_FOR_TABLE = 'comment-for-table';
    public $toastr_key = 'comments';
    public $commentsMetadata = null;
    public $metadataMappingImage = [];
    public $oldMetadata;

    public function init()
    {
        $params_module_comments = isset(Yii::$app->params['module-comments']) ? Yii::$app->params['module-comments'] : null;
        if ($params_module_comments != null) {
            $metadataClass = isset($params_module_comments['metadataClass']) ? $params_module_comments['metadataClass'] : null;
            if ($metadataClass != null && class_exists($metadataClass)) {
                try {
                    $this->commentsMetadata = new $metadataClass();
                } catch (Exception $ex) {
                }
            }
        }
        if ($this->commentsMetadata != null &&
            $this->commentsMetadata instanceof MetadataInterface &&
            isset($params_module_comments['metadataMappingImage']) &&
            is_array($params_module_comments['metadataMappingImage'])) {
            $this->metadataMappingImage = $params_module_comments['metadataMappingImage'];
            $this->commentsMetadata->setPath($this->metadataMappingImage);
        } else $this->commentsMetadata = null;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function afterFind()
    {
        if ($this->commentsMetadata != null) $this->commentsMetadata->setAttributes($this->metadata, false);
        $this->oldMetadata = $this->getAttribute('metadata');
        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                [
                    'class' => BlameableBehavior::class,
                    'createdByAttribute' => 'created_by',
                    'updatedByAttribute' => 'updated_by',
                ],
                'timestamp' => [
                    'class' => 'yii\behaviors\TimestampBehavior',
                    'preserveNonEmptyValues' => true,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                        ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                    ],
                ],
                [
                    'class' => AttributeBehavior::class,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_VALIDATE => ['commentsMetadata']
                    ],
                    'value' => function () {
                        if ($this->commentsMetadata != null) {
                            $this->commentsMetadata->setAttributes($this->metadata, false);
                            return $this->commentsMetadata;
                        }
                        return null;
                    }
                ]
            ]
        );
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['comment'], 'required'],
            [['comment_table', 'comment_id'], 'required', 'on' => self::SCENARIO_COMMENT_FOR_TABLE],
            [['comment'], 'string'],
            [['comment_id', 'status'], 'integer'],
            [['metadata'], 'safe'],
            [['comment_table'], 'string', 'max' => 255],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['created_by' => 'id']],
            [['updated_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::class, 'targetAttribute' => ['updated_by' => 'id']],
            [['metadata'], 'validateMetadata']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => CommentsModule::t('comments', 'ID'),
            'comment' => CommentsModule::t('comments', 'Comment'),
            'comment_table' => CommentsModule::t('comments', 'Comment Table'),
            'comment_id' => CommentsModule::t('comments', 'Comment ID'),
            'status' => CommentsModule::t('comments', 'Status'),
            'created_at' => CommentsModule::t('comments', 'Created At'),
            'created_by' => CommentsModule::t('comments', 'Created By'),
            'updated_at' => CommentsModule::t('comments', 'Updated At'),
            'updated_by' => CommentsModule::t('comments', 'Updated By'),
            'metadata' => CommentsModule::t('comments', 'Metadata'),
        ];
    }

    public function beforeSave($insert)
    {
        $this->metadata = $this->commentsMetadata != null ? $this->commentsMetadata->getMetadata() : [];
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($this->commentsMetadata != null) {
            foreach ($this->commentsMetadata->getPath() as $key => $value) {
                if (array_key_exists($key, $this->oldMetadata) && $this->oldMetadata[$key] != $this->metadata[$key]) {
                    @unlink($value . $this->oldMetadata[$key]);
                }
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function validateMetadata()
    {
        if (!$this->hasErrors() && $this->commentsMetadata != null) {
            $this->commentsMetadata->setAttributes($this->metadata, false);
            if (!$this->commentsMetadata->validate()) {
                foreach ($this->commentsMetadata->getErrors() as $k => $error) {
                    $err = is_array($error[0]) ? implode('<br/>', $error[0]) : $error[0];
                    $this->addError('metadata[' . $k . ']', $err);
                }
            }
            $this->mappingMetadata();
        }
    }

    public function mappingMetadata()
    {
        if ($this->commentsMetadata != null && is_array($this->metadataMappingImage) && count($this->metadataMappingImage) > 0) {
            foreach ($this->metadataMappingImage as $key => $value) {
                if (!isset($value['ipt'])) continue;
                $k = $value['ipt'];
                $image = UploadedFile::getInstance($this, "metadata[{$k}]");
                $this->commentsMetadata->setAttributes([
                    $k => $image
                ]);
            }
        }
    }
}
