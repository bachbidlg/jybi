<?php

namespace modava\website\models\table;

use modava\website\models\query\KeyValueQuery;
use Yii;

class KeyValueTable extends \yii\db\ActiveRecord
{
    const STATUS_PUBLISHED = 1;
    const STATUS_DISABLED = 0;

    public static function tableName()
    {
        return 'website_key_value';
    }

    public static function find()
    {
        return new KeyValueQuery(get_called_class());
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-key-value-get-value-by-key-' . $this->key
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-key-value-get-value-by-key-' . $this->key
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function getValueByKey($data_key, $data_cache = YII2_CACHE)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-key-value-get-value-by-key-' . $data_key;
        $data = $cache->get($key);
        if ($data == false || $data_cache === false) {
            $query = self::find()->where([self::tableName() . '.key' => $data_key])->published();
            $row = $query->one();
            $data = $row != null ? $row->value : null;
            $cache->set($key, $data);
        }
        return $data;
    }
}
