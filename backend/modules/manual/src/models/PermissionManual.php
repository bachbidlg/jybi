<?php

namespace milkyway\manual\models;

use common\helpers\MyHelper;
use common\models\User;
use milkyway\manual\ManualModule;
use milkyway\manual\models\table\PermissionManualTable;
use yii\behaviors\BlameableBehavior;
use yii\db\ActiveRecord;
use Yii;

/**
 * This is the model class for table "permission_manual".
 *
 * @property int $id
 * @property string $title
 * @property int $parent
 * @property string $for_permission Áp dụng cho modules-controller-action nào, định dạng theo permission của auth
 * @property int $status
 * @property int $sort Thứ tự
 * @property int $created_at Ngày tạo
 * @property int $created_by Người tạo
 * @property int $updated_at Ngày cập nhật
 * @property int $updated_by Người cập nhật
 * @property string $alias
 * @property int $level
 *
 * @property UserManual[] $userManuals
 */
class PermissionManual extends PermissionManualTable
{
    public $toastr_key = 'permission-manual';

    /**
     * @return array
     */
    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                [
                    'class' => BlameableBehavior::class,
                    'createdByAttribute' => 'created_by',
                    'updatedByAttribute' => 'updated_by',
                ],
                'timestamp' => [
                    'class' => 'yii\behaviors\TimestampBehavior',
                    'preserveNonEmptyValues' => true,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                        ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                    ],
                ],
            ]
        );
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            [['title', 'for_permission'], 'required'],
            [['parent', 'status', 'sort', 'created_at', 'created_by', 'updated_at', 'updated_by', 'level'], 'integer'],
            [['title', 'for_permission'], 'string', 'max' => 255],
            [['alias'], 'string', 'max' => 500],
        ];
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'id' => ManualModule::t('manual', 'ID'),
            'title' => ManualModule::t('manual', 'Title'),
            'parent' => ManualModule::t('manual', 'Parent'),
            'for_permission' => ManualModule::t('manual', 'For Permission'),
            'status' => ManualModule::t('manual', 'Status'),
            'sort' => ManualModule::t('manual', 'Sort'),
            'created_at' => ManualModule::t('manual', 'Created At'),
            'created_by' => ManualModule::t('manual', 'Created By'),
            'updated_at' => ManualModule::t('manual', 'Updated At'),
            'updated_by' => ManualModule::t('manual', 'Updated By'),
            'alias' => ManualModule::t('manual', 'Alias'),
            'level' => ManualModule::t('manual', 'Level'),
        ];
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     * @throws \yii\db\Exception
     */
    public function afterSave($insert, $changedAttributes)
    {
        $old_alias = $this->alias;
        $alias = '';
        $level = 0;
        if ($this->parentHasOne != null) {
            $alias = $this->parentHasOne->alias;
            $level = $this->parentHasOne->level + 1;
        }
        $alias .= '/' . $this->primaryKey;
        $change_alias = $old_alias != $alias;
        if ($change_alias) {
            $this->updateAttributes([
                'alias' => $alias,
                'level' => $level
            ]);
        }
        if ($change_alias && $old_alias != null) {
            $old_level = (is_array($this->_old_attributes) && array_key_exists('level', $this->_old_attributes) ? $this->_old_attributes['level'] : 0) - $this->getAttribute('level');
            Yii::$app->db->createCommand("UPDATE " . self::tableName() . " SET alias=REPLACE(alias, '{$old_alias}/', '{$alias}/'), level=level+{$old_level} WHERE alias LIKE '{$old_alias}/%'")->execute();
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * @return bool
     */
    public function canAccess()
    {
        return Yii::$app->user->can($this->for_permission) || ($this->parentHasOne != null && $this->parentHasOne->canAccess());
    }

    /**
     * @param string $prefix
     * @param null $get_menu
     * @param null $menu
     * @param null $parent
     * @return array|mixed|null
     */
    public static function getMenuDropdown($prefix = '|--', $get_menu = null, $menu = null, $parent = null)
    {
        if ($get_menu == null) {
            $get_menu = self::getMenu($parent);
            if ($parent != null) {
                $row = self::findOne($parent);
                if ($row != null) $get_menu = [
                    'data' => $row,
                    'child' => $get_menu
                ];
            }
        }
        if ($menu == null) $menu = [];
        if (count($get_menu) > 0) {
            foreach ($get_menu as $row) {
                $menu[$row['data']->primaryKey] = $prefix . $row['data']->title;
                if (count($row['child']) > 0) $menu = self::getMenuDropdown($prefix . '|--', $row['child'], $menu);
            }
        }
        return $menu;
    }

    /**
     * @param null|int $parent
     * @return array
     */
    public static function getMenu($parent = null): array
    {
        $query = self::find()->where(['parent' => $parent]);
        if ($query->count() == 0) return [];
        $menu = [];
        foreach ($query->all() as $row) {
            $menu[] = [
                'data' => $row,
                'child' => self::getMenu($row->id),
            ];
        }
        return $menu;
    }
}
