<?php

namespace milkyway\manual\models\table;

use milkyway\manual\models\query\PermissionManualQuery;
use milkyway\manual\models\UserManual;
use Yii;

class PermissionManualTable extends \yii\db\ActiveRecord
{
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISHED = 1;

    public static function tableName()
    {
        return 'permission_manual';
    }

    public static function find()
    {
        return new PermissionManualQuery(get_called_class());
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getParentHasOne()
    {
        return $this->hasOne(self::class, ['id' => 'parent']);
    }

    public function getChildHasMany($sort = SORT_ASC)
    {
        return $this->hasMany(self::class, ['parent' => 'id'])->orderBy(['sort' => $sort]);
    }

    public function getUserManuals()
    {
        return $this->hasMany(UserManual::class, ['for_permission' => 'id']);
    }

    public function getuserCreated()
    {
        return $this->hasOne(Yii::$app->user->identityClass, ['id' => 'created_by']);
    }

    public function getUserUpdated()
    {
        return $this->hasOne(Yii::$app->user->identityClass, ['id' => 'updated_by']);
    }
}
