<?php

namespace milkyway\language\models\table;

use cheatsheet\Time;
use common\models\User;
use milkyway\language\models\query\LanguageQuery;
use Yii;
use yii\db\ActiveRecord;

class LanguageTable extends \yii\db\ActiveRecord
{
    const STATUS_DISABLED = 0;
    const STATUS_PUBLISHED = 1;
    public $pathImage;

    public function init()
    {
        $this->pathImage = Yii::getAlias('@frontend/web/uploads/language');
        parent::init(); // TODO: Change the autogenerated stub
    }

    public static function tableName()
    {
        return 'language';
    }

    public static function find()
    {
        return new LanguageQuery(get_called_class());
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-language-get-by-id-' . $this->id,
            'redis-language-get-by-all'
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        if ($this->image != null && file_exists($this->pathImage . '/' . $this->imaage)) {
            @unlink($this->pathImage . '/' . $this->image);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-language-get-by-id-' . $this->id,
            'redis-language-get-by-all'
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserCreated()
    {
        return $this->hasOne(User::class, ['id' => 'created_by']);
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserUpdated()
    {
        return $this->hasOne(User::class, ['id' => 'updated_by']);
    }

    public function getById($id)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-language-get-by-id-' . $id;
        $data = $cache->get($key);
        if ($data == false) {
            $query = self::find()->where([self::tableName() . '.id' => $id])->published();
            $data = $query->one();
            $cache->set($key, $data);
        }
        return $data;
    }

    public function getAll()
    {
        $cache = Yii::$app->cache;
        $key = 'redis-language-get-by-all';
        $data = $cache->get($key);
        if ($data == false) {
            $query = self::find()->published()->sort();
            $data = $query->all();
            $cache->set($key, $data);
        }
        return $data;
    }
}
