<?php

namespace milkyway\language\models;

use common\helpers\MyHelper;
use common\models\User;
use milkyway\language\LanguageModule;
use milkyway\language\models\table\LanguageTable;
use yii\behaviors\BlameableBehavior;
use yii\behaviors\SluggableBehavior;
use yii\db\ActiveRecord;
use Yii;
use yii\web\UploadedFile;

/**
 * This is the model class for table "language".
 *
 * @property int $id
 * @property string $name
 * @property string $slug
 * @property string $image
 * @property int $status
 * @property int $sort Thứ tự
 * @property int $created_at
 * @property int $created_by
 * @property int $updated_at
 * @property int $updated_by
 *
 * @property User $createdBy
 * @property User $updatedBy
 */
class Language extends LanguageTable
{
    public $toastr_key = 'language';
    public $iptImage;
    private $oldImage;

    public function behaviors()
    {
        return array_merge(
            parent::behaviors(),
            [
                'slug' => [
                    'class' => SluggableBehavior::class,
                    'immutable' => false,
                    'ensureUnique' => true,
                    'value' => function () {
                        return MyHelper::createAlias($this->name);
                    }
                ],
                [
                    'class' => BlameableBehavior::class,
                    'createdByAttribute' => 'created_by',
                    'updatedByAttribute' => 'updated_by',
                ],
                'timestamp' => [
                    'class' => 'yii\behaviors\TimestampBehavior',
                    'preserveNonEmptyValues' => true,
                    'attributes' => [
                        ActiveRecord::EVENT_BEFORE_INSERT => ['created_at', 'updated_at'],
                        ActiveRecord::EVENT_BEFORE_UPDATE => ['updated_at'],
                    ],
                ],
            ]
        );
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['status', 'created_at', 'created_by', 'updated_at', 'updated_by'], 'integer'],
            [['name', 'image'], 'string', 'max' => 255],
            [['name'], 'unique'],
            [['iptImage'], 'file', 'extensions' => ['jpg', 'jpeg', 'png'], 'maxSize' => 2 * 1024 * 1024, 'wrongExtension' => 'Chỉ chấp nhận định dạng file: {extensions}']
        ];
    }

    public function beforeSave($insert)
    {
        $this->oldImage = $this->getOldAttribute('image');
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $iptImage = UploadedFile::getInstance($this, 'iptImage');
        if ($iptImage != null) {
            $imageName = $iptImage->baseName . '-' . time() . '.' . $iptImage->extension;
            if ($iptImage->saveAs($this->pathImage . '/' . $imageName)) {
                $this->updateAttributes([
                    'image' => $imageName
                ]);
                if (file_exists($this->pathImage . '/' . $this->oldImage)) {
                    @unlink($this->pathImage . '/' . $this->oldImage);
                }
            }
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => LanguageModule::t('language', 'ID'),
            'name' => LanguageModule::t('language', 'Name'),
            'slug' => LanguageModule::t('language', 'Slug'),
            'image' => LanguageModule::t('language', 'Image'),
            'status' => LanguageModule::t('language', 'Status'),
            'created_at' => LanguageModule::t('language', 'Created At'),
            'created_by' => LanguageModule::t('language', 'Created By'),
            'updated_at' => LanguageModule::t('language', 'Updated At'),
            'updated_by' => LanguageModule::t('language', 'Updated By'),
        ];
    }
}
