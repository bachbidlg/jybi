<?php

namespace milkyway\shop\models\table;

use modava\auth\models\User;
use Yii;

class ShopTable extends \yii\db\ActiveRecord
{
    public $pathImage;
    public $urlImage;
    public $logo;
    public $email;
    public $phone;
    public $hotline;
    public $mst;
    public $created;
    public $started;

    public function init()
    {
        $this->pathImage = Yii::getAlias('@frontend/web/uploads/shop');
        $this->urlImage = Yii::getAlias('@frontendUrl/uploads/shop');
        parent::init(); // TODO: Change the autogenerated stub
    }

    public static function tableName()
    {
        return 'shop';
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub
        foreach ($this->getAttribute('metadata') as $k => $v) {
            if ($this->canSetProperty($k)) $this->$k = $v;
        }
    }

    public function afterDelete()
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-shop-get-by-id-' . $this->id,
            'redis-shop-get-all',
            'redis-shop-get-one'
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        $cache = Yii::$app->cache;
        $keys = [
            'redis-shop-get-by-id-' . $this->id,
            'redis-shop-get-all',
            'redis-shop-get-one'
        ];
        foreach ($keys as $key) {
            $cache->delete($key);
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function getMetadata($data)
    {
        if (array_key_exists($data, $this->metadata)) return $this->metadata[$data];
        return null;
    }

    public function imageExist($image, $folder = null)
    {
        return $this->canGetProperty($image) && !is_dir($this->pathImage . '/' . ($folder != null ? $folder . '/' : '') . $this->$image) && file_exists($this->pathImage . '/' . ($folder != null ? $folder . '/' : '') . $this->$image);
    }

    public function getImage($image, $folder = null)
    {
        if ($this->imageExist($image, $folder)) {
            return Yii::$app->assetManager->publish($this->pathImage . '/' . ($folder != null ? $folder . '/' : '') . $this->$image)[1];
        }
        return null;
    }

    public function getShopLanguage()
    {
        return $this->hasMany(ShopLanguageTable::class, ['shop_id' => 'id'])->indexBy('language_id');
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserCreated()
    {
        return $this->hasOne(User::class, ['id' => 'created_by']);
    }

    /**
     * Gets query for [[User]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getUserUpdated()
    {
        return $this->hasOne(User::class, ['id' => 'updated_by']);
    }

    public static function getById($id)
    {
        $cache = Yii::$app->cache;
        $key = 'redis-shop-get-by-id-' . $id;
        $data = $cache->get($key);
        if ($data == false) {
            $query = self::find()->where([self::tableName() . '.id' => $id]);
            $data = $query->one();
            $cache->set($key, $data);
        }
        return $data;
    }

    public static function getAll()
    {
        $cache = Yii::$app->cache;
        $key = 'redis-shop-get-all';
        $data = $cache->get($key);
        if ($data == false) {
            $query = self::find();
            $data = $query->all();
            $cache->set($key, $data);
        }
        return $data;
    }

    public static function getOne()
    {
//        $cache = Yii::$app->cache;
//        $key = 'redis-shop-get-one';
//        $data = $cache->get($key);
//        if ($data == false) {
            $query = self::find()->orderBy([self::tableName() . '.created_at' => SORT_DESC]);
            $data = $query->one();
//            $cache->set($key, $data);
//        }
        return $data;
    }
}
